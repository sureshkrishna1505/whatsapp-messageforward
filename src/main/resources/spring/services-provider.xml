<?xml version="1.0" encoding="UTF-8"?>
<!--
 - Copyright 2016 foreveross inc.
 -
 - Licensed under the Apache License, Version 2.0 (the "License");
 - you may not use this file except in compliance with the License.
 - You may obtain a copy of the License at
 -
 -      http://www.apache.org/licenses/LICENSE-2.0
 -
 - Unless required by applicable law or agreed to in writing, software
 - distributed under the License is distributed on an "AS IS" BASIS,
 - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 - See the License for the specific language governing permissions and
 - limitations under the License.
-->
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
	http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd">


    <!-- here we demonstrate both annotation-based and xml-based configs, spring-boot默认自动开启 -->
    <!--<dubbo:annotation package="com.foreveross.test" />-->


    <dubbo:protocol id="dubbo" name="dubbo" serialization="kryo" optimizer="whatsapp.service.optimizers.SerializationOptimizerImpl"/>
    <!--<dubbo:protocol name="dubbo" serialization="fst" optimizer="com.alibaba.dubbo.demo.SerializationOptimizerImpl"/>-->
    <!--<dubbo:protocol name="dubbo" serialization="nativejava"/>-->
    <!--<dubbo:protocol name="dubbo" serialization="hessian2"/>-->
    <!--<dubbo:protocol name="dubbo" serialization="fastjson"/>-->
    <!--<dubbo:protocol name="dubbo" serialization="jackson" />-->
    <!--<dubbo:protocol name="dubbo" serialization="dubbo"/>-->

    <!--
        <dubbo:protocol name="http" port="8889"/>
        <dubbo:protocol name="hessian" port="8890"/>
        <dubbo:protocol name="webservice" port="8892"/>
    -->

    <!--TODO according to the spring convention, we should use something like keep-alive-->
    <!-- use embedded netty server -->
    <!--<dubbo:protocol name="rest" port="8888" keepalive="true" server="netty" iothreads="5" threads="100" contextpath="services"/>-->

    <!-- use embedded tjws server -->
    <!--<dubbo:protocol name="rest" port="8888" server="tjws" contextpath="services"/>-->

    <!-- use the external tomcat or other server with the servlet approach; the port and contextpath must be exactly the same as those in external server -->
    <dubbo:protocol id="rest" name="rest" server="servlet" extension="whatsapp.service.extension.TraceInterceptor,
           whatsapp.service.extension.TraceFilter,
	       whatsapp.service.extension.ClientTraceFilter,
	       whatsapp.service.extension.DynamicTraceBinding,
	       whatsapp.service.extension.CustomExceptionMapper,
	       whatsapp.service.extension.ApiExceptionMapper,
	       whatsapp.service.extension.ApplicationExceptionMapper,
	       whatsapp.service.extension.LoggingFilter"/>

    <dubbo:service owner="whatsapp" interface="whatsapp.service.rest.api.ProductRestService" ref="productRestService" protocol="rest" connections="200" validation="true" group="xmlConfig" version="1.0.0" />

    <dubbo:service owner="whatsapp" interface="whatsapp.service.rest.api.OverviewResourceRestService" ref="overviewResourceRestService" protocol="rest" connections="200" validation="true" group="xmlConfig" version="1.0.0" />

</beans>
